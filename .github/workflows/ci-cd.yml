name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  test-backend:
    name: Test Backend (.NET)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore api/api.csproj
      
    - name: Build
      run: dotnet build api/api.csproj --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test api/api.csproj --no-build --verbosity normal --configuration Release
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: api/TestResults/
        retention-days: 30

  test-frontend:
    name: Test Frontend (React)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Install dependencies
      working-directory: ui
      run: npm ci
      
    - name: Run linting
      working-directory: ui
      run: npm run lint
      
    - name: Run tests
      working-directory: ui
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: ui/coverage/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, csharp
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Build Backend
      run: |
        dotnet publish api/api.csproj -c Release -o api/dist
        dotnet publish api/api.csproj -c Release -o api/dist-self-contained --self-contained true -r linux-x64
        
    - name: Build Frontend
      working-directory: ui
      run: |
        npm ci
        npm run build
        
    - name: Upload Backend Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: api/dist/
        retention-days: 7
        
    - name: Upload Frontend Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ui/dist/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Backend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: api/dist/
        
    - name: Download Frontend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ui/dist/
        
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Copy files to staging server, run deployment scripts, etc.
        
    - name: Run Integration Tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here
        # Example: npm run test:integration

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Backend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: api/dist/
        
    - name: Download Frontend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ui/dist/
        
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Copy files to production server, run deployment scripts, etc.
        
    - name: Health Check
      run: |
        echo "Running health checks..."
        # Add health check commands here
        # Example: curl -f http://your-production-url/health

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "Deployment successful! üéâ"
        # Add notification logic (Slack, Teams, email, etc.)
        
    - name: Notify on Failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed! ‚ùå"
        # Add failure notification logic 